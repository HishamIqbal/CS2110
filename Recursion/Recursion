//MHI8ZX Mohammad Hisham Iqbal

import java.awt.Color;

public class Recursion {

	public static void main(String[] args) {
		
		//TEST 1: evil
		//Expected output: live
		//Actual output: live
		System.out.print("reverseString test 1 'evil': ");
		System.out.println(reverseString("evil"));
		
		//TEST 2: twix
		//Expected output: xiwt
		//Actual output: xiwt
		System.out.print("reverseString test 2 'twix': ");
		System.out.println(reverseString("twix"));
		
		//Test 1: 10
		//Expected output: 89
		//Actual output: 89
		System.out.print("countWays test 1, 10: ");
		System.out.println(CountWays(10));
		
		//Test 2: 14
		//Expected output: 610
		//Actual output: 610
		System.out.print("countWays test 2, 14: ");
		System.out.println(CountWays(14));
				
		//Test 1: 5
		//Expected output: 10
		//Actual output: 10
		System.out.print("Handshake test 1, 5: ");
		System.out.println(Handshake(5));
		
		//Test 1: 7
		//Expected output: 21
		//Actual output: 21
		System.out.print("Handshake test 2, 7: ");
		System.out.println(Handshake(7));
		
		//Test 1: 1,2
		//Expected output: 4
		//Actual output: 4
		System.out.print("Ackermann test 1, 1,2: ");
		System.out.println(Ackermann(1,2));
		
		//Test 2: 3,1
		//Expected output: 13
		//Actual output: 13
		System.out.print("Ackermann test 2, 3,1: ");
		System.out.println(Ackermann(3,1));
		
		//Test 1: 1,2
		//Expected output: 4
		//Actual output: 4
		System.out.print("SquareRoot test 1, 125: ");
		System.out.println(squareRoot(125));

		//Test 2: 3,1
		//Expected output: 13
		//Actual output: 13
		System.out.print("SquareRoot test 2, 4: ");
        System.out.println(squareRoot(4.0));				
		
        //Test 1 for snowflake
		World world = new World(900, 900, Color.WHITE);
		Turtle t = new Turtle(world);
		t.setDelay(0);
		
		snowflake(t,4,200);
		
		//Test 2 for snowflake
		World world2 = new World(900, 900, Color.GREEN);
		Turtle f = new Turtle(world);
		f.setDelay(0);
		
		snowflake(f,6,210);
	}
	
	//Prints a string backwards
	public static String reverseString(String s) {
		String reverse = "";
        if(s.length() == 1){
            return s;
        } else {
            reverse += s.charAt(s.length()-1)
                    +reverseString(s.substring(0,s.length()-1));
            return reverse;
        }
	}//End of reverseString method
		
    //Counts the number of stairs that are used
	static int CountWays(int Stairs) {

		if (Stairs < 0) 
		{
			return 0;
		} 
		else if (Stairs == 0) 
		{
			return 1;
		} 
		else 
		{
			return (CountWays(Stairs - 1) + CountWays(Stairs - 2));
		}
	}//End of CountWays method
	
	//Counts the amount of handshakes needed between a group of people
	public static int Handshake(int people){
		if(people==2){
	         return 1;
	    }
	    else if(people > 2){
	    	   return Handshake(people - 1) + (people - 1);
	    }
	    return 0;
	}//End of Handshake method
	
	//Uses the Ackermann algorithm
	public static int Ackermann(int m, int n){
		
	    if((m > 0) && (n==0)){
	    	   return Ackermann(m-1,1);
	    }
	   else if ((m>0) && (n>0)){
	    		return Ackermann(m-1,Ackermann(m,n-1));
	    }
		return n+1;
	}//End of Ackermann method
	
	//Uses the squareRootGuess algorithm, helper method
	public static double squareRootGuess(double x, double g) {
		double base= g*g;
		if(Math.abs(x-base) <= .0001) {
			return g;
		}
		else {
			double y= (g+(x/g))/2;
			return squareRootGuess(x,y);
		}	
	}//End of squareRootGuess
		
	//Uses the helper method above
	public static double squareRoot(double x) {
		return squareRootGuess(x,x-1);
	}//End of squareRoot

	//Uses the helper method of kockSnowFlake
	public static void snowflake(Turtle snow, int d, int size) {
			
		kochSnowFlake(snow, d, size);
		snow.right(120);
		     
		kochSnowFlake(snow,d,size);
		snow.right(120);
		     
		kochSnowFlake(snow,d,size);
	}//End of snowflake
		
	//Draws the actual recursion snowflake
	public static void kochSnowFlake(Turtle t, int d, double size) {
			
		if(d == 0) {
			t.forward(size);
		}
		else {
				
			size/=3;
				
			kochSnowFlake(t,d-1, size);
			t.left(60.0);
				
			kochSnowFlake(t,d-1,size);
			t.right(120);
				
			kochSnowFlake(t,d-1, size);
			t.left(60.0);
				
			kochSnowFlake(t,d-1, size);
		}
	}//End of kockSnowFlake

}//End of class
